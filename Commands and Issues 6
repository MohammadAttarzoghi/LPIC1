bash- general setting is in /etc/profile and user dependent settting can be found in ~/.bash_profile, ~/.bash_logout.s
echo hello this is my world # do not screw it please.
echo with escaped characters: echo -e "hello\nthere"
Escape sequence Function
\a   Alert (bell)
\b  Backspace
\c  Suppress trailing newline(same function as -n option)
\f  Form feed (clear the screen on a video display)
\n  New line
\r Carriage return
\t Horizontal tab
break command in lines
echo hi\
my name is ali
hi my name is ali

The most important ones are ; (do one by one), && (logical and) and || (logical or).
$ echo line 1;echo line 2; echo line 3 line  1
line 2
line 3
$ echo line 1&&echo line 2&&echo line 3 line  1
line 2
line 3

$ echo line 1||echo line 2; echo line 3 
line 1
line 3
exiting the shell:
exit and ctrl+d, 
if a command is run inside paranteses that will be executed inside a sub-shell
'exec' will run and closes the current shell.

environment variables
Name          Function

USER   The name of the logged-in user
UID    The numeric user id of the logged-in user
HOME   The user's home directory
PWD    The current working directory
SHELL  The name of the shell
$      The process id (or PIDof the running bash shell (or other) process
PPID   The process id of the process that started this process (that is, the id of the parent process)
?      The exit code of the last command
by exporting a variable it can be acceissible for other programs starting from that sehll
echo "-${HOME}_abc"
env list the current EVs
export: makes the variable global. the variable would be accessible from other shells that runs by the same user.
        This change is temporal and if you want to do it permanently, you should write the variable assignment in
        userhome folder in .bashrc file. .bash_history, .bash_logout, .bash_profile
unset deletes the variable
https://www.tecmint.com/set-path-variable-linux-permanently/
which command: shows the command path
uname


Option                                     Description

-s                    Print the kernel name. This is the default if no option is specified.
-n                    Print the nodename or hostname.
-r                     Print the release of the kernel. This option is often used with module-handling commands.
-v                    Print the version of the kernel.
-m                   Print the machine's hardware (CPU) name.
-o                    Print the operating system name.
-a                   Print all of the above information.

history

history 20  shows last 20 commands
!!          last command
!string     most recent command that starts with string
!?string?   most recent command that contains string
Paths
which command
whereis command
type command
man -f command
apropos somewords # it searches all man pages
------------------------------------------------
piping
ls dir >myout
cat> mydata
..
..
..
CTRL+D
cat file1 file2

od, -t a ,-t c

split -l 2 input output 
split -b 42
split -n 5
split -ld     x00 x01 ...
cat x*> original files
wc , wc -l
head -n20 -20
tail -f
expand tab to space
unexpand
tr '123' 'ABC' replaces 123 to ABC
wc -l mydata | cat mydata - mydata  if you put - instead of a filename, the data will be replaced from the pipe (or keyboard stdin).
pr
nl numbers lines. cat -n
sort, sort -n for numerical sort, -r will do reverse.
uniq: it is clear that for correct output, input must be sorted first.
uniq -c counts of each item
uniq -u shows only non repeated items.
uniq -d shows only repeated items.
cut will cut a column: cut -f1 howcool cut -f1-3 or cut -c4,5,6,7.
tr ' ' '\t\

Paste: it paste contents of two files side by side.
join: joins contents of files based on the matching field. files must be sorted before using to join
sed stream editor: 's/a/b/g' or sed 's/ /\t/g' mydata>mydata.tab
---------------------------------------
ls -t -r -1 -l
cp source destination
mv
rm

-f (--force) will cause cp to try overwrite the target.
-i (--interactive) will ask Y/N question (deleting / overwriting).
-b  (--backup) will make backups of overwritten files
-p  will preserve the attributes.
mkdir -p will create nested dirctories.
rmdir -p nested directories.
$  tree
.
├── dirA
├── dirB
├──   howcool.sort
└──  uses.sort

2 directories, 2 files
$  rmdir  dirA  dirB
$  mkdir  -p  newDir/insideNew/lastDir
$  tree
.
├──   howcool.sort
├──  newDir
│       └──  insideNew
│              └──  lastDir
└──  uses.sort

3 directories, 2 files
$  rmdir  -p  newDir/insideNew/lastDir
$  tree
.
├──   howcool.sort
└──  uses.sort

0 directories, 2 files

-r option will do it recursively

$ tree mydir
mydir
├──   howcool.sort
├──  newDir
│       ├──  insideNew
│      │      └──  lastDir
│      └──  TestFile
└──  uses.sort

3 directories, 3 files
$  mkdir  newCopy
$ cp mydir newCopy
cp: omitting directory ‘mydir’
$ cp -r mydir newCopy
$ tree newCopy/
newCopy/
└── mydir
├──   howcool.sort
├──  newDir
│       ├──  insideNew
│      │      └──  lastDir
│      └──  TestFile
└──  uses.sort

4 directories, 3 files
rm -rf / extremly dangerous.
wildcards
* means any string
?   means any single character
[ABC]   matches A, B & C
[a-k]  matches a, b, c, ..., k (both lower-case and capital)
[0-9a-z]  matches all digits and numbers
[!x] means NOT X.
touch will touch a file.


[ian@echidna lpi103-2]$ touch -t 200908121510.59 f3 [ian@echidna lpi103-2]$ touch -d 11am f4  
[ian@echidna  lpi103-2]$  touch  -d  "last  fortnight"  f5 [ian@echidna lpi103-2]$ touch -d 
"yesterday 6am" f6
[ian@echidna lpi103-2]$ touch -d "2 days ago 12:00" f7 [ian@echidna lpi103-2]$ touch -d "tomorrow 
02:00" f8 [ian@echidna lpi103-2]$ touch -d "5 Nov" f9 [ian@echidna lpi103-2]$ ls -lrt f*
-rw-rw-r--. 1 ian ian 0 2009-07-31 18:31 f5
-rw-rw-r--. 1 ian ian 0 2009-08-12 12:00 f7
-rw-rw-r--. 1 ian ian 0 2009-08-12 15:10 f3
-rw-rw-r--. 1 ian ian 0 2009-08-13 06:00 f6
-rw-rw-r--. 1 ian ian 0 2009-08-14 11:00 f4
-rw-rw-r--. 1 ian ian 4 2009-08-14 18:25 f1
-rw-rw-r--. 1 ian ian 0 2009-08-14 18:27 f2
-rw-rw-r--. 1 ian ian 0 2009-08-15 02:00 f8
-rw-rw-r--. 1 ian ian 0 2009-11-05 00:00 f9
setting another file touch time to another file:
[ian@echidna  lpi103-2]$  date Fri Aug 14 18:33:48 EDT 2009
[ian@echidna lpi103-2]$ date -r f1 Fri Aug 14 18:25:50 EDT 2009
[ian@echidna lpi103-2]$ touch -r f1 f1a [ian@echidna lpi103-2]$ ls -l f1*
-rw-rw-r--. 1 ian ian 4 2009-08-14 18:25 f1
-rw-rw-r--. 1 ian ian 0 2009-08-14 18:25 f1a
find . -iname -type f "*my" -size +1M -size -100M
-type f
-type d
-type l
find . -empty -exec rm '{}' \;
find . -name "*.htm" -exec mv '{}' '{}l' \;
find /root/lpic* -ls

switch  meaning
-atime -6                  file was last accessed less than 6*24 hours ago
-ctime +6                  file was changed more than 6*24 hours ago
-mtime -6                  file content moditication less than time is 6*24 ago
-mmin -90                  file's data was last modified less than 90 minutes ago
-amin, -cmin               you guess!
-----------------------
ansible practic: iinstall sshpass , determine os distro
playbook in ansible
----------------------
file will identify the
file -i will add extra comments.

Compressing files
gzip filename
gunzip zipfilename
  gzip preserves time
  gzip creates the new compressed file with the same name but with .gz ending
  gzip removes the original files after creating the compressed file
bzip2 filename
bunzip2 filename

Archiving files: tar cpio

switch  meanint
-cf myarchive.tar                create file named myarchive.tar
-xf myarchive.tar                extract a file called myarchive.tar
-z                               compress the archive with gzip after creating it
-b                               compress the archive with bzip2 after creating it
-v                               verbose! print a lot of data about what you are doing
-r                               appeng new files to the currentyp available archive
-o makes cpio to create an output from its input
cpio does not goes into the folders. So mostly we use it with find.
find . -name "*" | cpio -o > myarchivefind.cpi
to decompress it:
mkdir extract
mv myarchivefind.cpio extract
cd extract
cpio -id < myarchivefind.cpio
-d will create the folders
-i is for extract

dd if= file, partition of= file bs= count=
# dd if=/dev/sda of=backup.dd bs=4096
# dd if=/dev/sda2 |gzip >backup.dd.gzip
$ dd if=/dev/zero of=1g.bin bs=1G count=1

ls j* m* > output 2> errors

1. stdout is the standard output stream, which displays output from commands (file descriptor 1)
2. stderr is the standard error stream, which displays error output from commands (file descriptor 2)
3. stdin is the standard input stream, which provides input to commands (file descriptor 0)
What are these file descriptions? There are used to control the output. If you need to control where your output goes, you
can add n> or n>> .
n> redirects file description n to a file or device. If the file already exists it is overwritten and if it does not exists, it
will be created.
n>> redirects file description n to a file or device. If the file already exists the stream will be appended to the end of it
and if it does not exists, it will be created.
if the n is not given, the default is standard output
The user who runs the command should have write access to the file.

$ ls
fiona habib mahmoodrm minoo mojtaba sina
$ ls j*
ls: cannot access j*: No such file or directory
$ ls m*
mahmoodrm minoo mojtaba
$ ls j* m*
ls: cannot access j*: No such file or directory
mahmoodrm minoo mojtaba
$ ls j* m* > output 2> errors
$ cat output
mahmoodrm
minoo
mojtaba
$ cat errors

ls: cannot access j*: No such file or directory
Redirect stdout to one file and stderr to another file:
command > out 2>error
Redirect stderr to stdout (&1), and then redirect stdout to a file:
command >out 2>&1
Redirect both to a file:
command &> out

redirecting input

here-documents
$ tr ' ' '.' << END_OF_DATA
> this is a line
> and then this
>
> we'll still type
> and,
> done!
> END_OF_DATA
this.is.a.line
and.then.this
we'll.still.type
and,
done!

$ cat what_i_have.txt
laptop
socks
tshirt
ball
socks
glasses
$ cut -f1 -d' ' what_i_have.txt | sort | uniq -c | sort -nr
2 socks
1 tshirt
1 laptop
1 glasses
1 ball
If you need to start your pipeline with the contents of a file, start with cat filename | ... or use a < stdin redirect.

xargs executes specific function on eacch line of output
ls | xargs echo hi baby
ls | xrgs -I DATA echo I have DATA and I love my DATA


tee shows the output on the secreen ls | tee myfile copyis ls content in myfile and shows the result on the screen.

bg show background jobs
fg shows foreground jobs
& put to background
jogs shows all jobs
ctrl +Z susptends a job

nohup script.sh > mynohup.out 2>&1 &

kill -9 PID (impolite)
kill -15 PID (polite)
killall proc(send 15)

ps show running procs in your shell
ps -aux or aux or -ef shows all processes in your entire computer system.

ps -C gedit -o user,pid,tty,time,comm
USER PID TT TIME COMMAND
jadi 6213 ? 00:04:49 gedit

It is also possible to use the --sort switch to sort output based on different fields (+ for ascending & - for descending).
$ ps -af --sort +comm,-sid
UID PID PPID C STIME TTY TIME CMD
root 5486 5478 0 19:59 pts/12 00:00:00 -su
root 4444 1169 0 19:56 tty4 00:00:00 -bash
jadi 6638 5412 0 20:10 pts/0 00:00:04 node /usr/local/bin/sslocal
jadi 7778 7651 0 20:58 pts/1 00:00:00 ps -af --sort +comm,-sid
jadi 7678 7651 0 20:48 pts/1 00:00:00 sleep 1000
jadi 7679 7651 0 20:48 pts/1 00:00:00 sleep 1001
jadi 7775 7651 0 20:58 pts/1 00:00:00 sleep 1000
jadi 7776 7651 0 20:58 pts/1 00:00:00 sleep 1000
jadi 7777 7651 0 20:58 pts/1 00:00:00 sleep 1000
root 5478 5477 0 19:59 pts/12 00:00:00 su -
root 5477 5008 0 19:59 pts/12 00:00:00 sudo su -
jadi 7680 7651 0 20:48 pts/1 00:00:01 xeyes

top

free
 uptime
 --------------------
 nice
 1. Give high priorities (less than 0) needs root access
2. If you are not root and asking for nice level lower than 0 you'll get an error message but the process will run with
normal nice level (0).
If you run a command with nice without any parameters, the nice value will be 10:

ps -l
renice changing the priority














